name: Go CI

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    name: Continuous Integration
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      matrix:
        go-version: [1.14]

      fail-fast: true

    steps:
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v2.1.3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: Cache Go modules
        uses: actions/cache@v2
        id: go-mod-cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Lint
        run: |
          go install golang.org/x/tools/cmd/goimports
          result=$($(go env GOPATH)/bin/goimports -d -e -local github.com/philips-labs/tabia $(go list -f {{.Dir}} ./...))
          echo $result
          [ -n "$result" ] && exit 1 || exit 0

      - name: Get dependencies
        run: go mod download

      - name: Install tools
        run: make install-tools

      - name: Build
        run: |
          make build

      - name: Test and Cover
        run: go test -v -race -count=1 -covermode=atomic -coverprofile=coverage.out ./...
        env:
          TABIA_GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Code Coverage
        uses: codecov/codecov-action@v1.2.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          yml: ./codecov.yml
          fail_ci_if_error: true

  release:
    name: release
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    steps:
      - name: Set up Go 1.14
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.14

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Login to DockerHub Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Release
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Logout from DockerHub Registry
        run: docker logout
